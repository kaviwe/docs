---
title: Installing
layout: tabbed-page
tab-title: Overview
order: 10
---

= Installing

Before you can start developing applications with Vaadin, you need to install the required tools.
You can also install plugins and extensions for common IDEs to speed up development.

[.cards.quiet.large]
== Installing Development Tools

[.breakout]
Follow the instructions for your operating system.

[.card]
=== Windows
Install development tools in Windows
<<windows#,See installation instructions for Windows>>

[.card]
=== macOS
Install development tools in macOS
<<macos#,See installation instructions for macOS>>

[.card]
=== Linux
Install development tools in Linux
<<linux#,See installation instructions for Linux>>

[.breakout]
=== Requirements

You need at least the following tools during application development:

* **Java JDK** version 8 or newer
* **Maven** version 3 or newer, or Gradle version 5.6 or newer

While Java 8 is supported, Java 11 is recommended (the latest LTS version) or later, but you need to make sure that your entire toolchain supports it.

Optionally, you can use:

* A Java IDE (Eclipse EE, NetBeans IDE, IntelliJ IDEA, VS Code, etc.)
* A front-end IDE such as VS Code, WebStorm, or Atom
* An external Java Servlet Container (Tomcat, TomEE, JBoss, WildFly, Glassfish, etc)

For a particular version of the Vaadin, please see the release notes for a more comprehensive list of requirements.


[.cards.quiet.large]
== IDE Plugins and Extensions

[.breakout]
Vaadin maintains plugins and extensions for the following IDEs:

[.card]
=== Eclipse
Instructions how to install the Vaadin plugin for Eclipse
<<eclipse#,See installation instructions for the Vaadin plugin for Eclipse>>

[.card]
=== VS Code
Instructions how to install the Vaadin extension for Visual Studio Code
<<vscode#,See installation instructions for the Vaadin extension for VS Code>>


== Additional Tools

=== Local Development Server

Vaadin applications are run by deploying them to a Java Servlet Container (a server application). All Vaadin starter packs come with an embedded servlet container that can be used during development.
You can also use an external servlet container, such as Tomcat, WildFly, or WebLogic.
IDEs include integration with external containers and one can make debugging easier, and more compatible if you use the same one for production.

=== Dependency Management

Managing Vaadin and other Java libraries can get tedious to do manually, so using a build system that manages dependencies automatically is recommended.
Vaadin is distributed in the Maven central repository, and can be used with any build or dependency management system that can access Maven repositories, such as Ivy or Gradle, and Maven.

The npm package manager is used for managing Vaadin frontend JavaScript dependencies.


=== Node.js, npm, and pnpm

[since:com.vaadin:vaadin@V14.2]#Vaadin automatically downloads and installs# (via its Maven plugin) supported versions of Node.js and npm into the `~/.vaadin` directory in the user's home, unless it detects that these tools are already installed globally.
If installed globally, Vaadin validates that the installed tools are of valid versions.

Other frontend tooling used by Vaadin, such as webpack and pnpm, are installed locally into each project by npm.
pnpm is a caching package manager that reduces the download time across multiple projects.

Node.js can be downloaded from https://nodejs.org/en/download/[https://nodejs.org/en/download/] and installing it automatically installs npm as well.

==== Proxy Settings for Downloading Frontend Toolchain
If you are behind a proxy server you should configure your proxy settings so Vaadin can use them to download the frontend toolchain.
Vaadin read proxy settings from four places.
You can set your proxy data in either of the followings:

. system properties:
. {project directory}/.npmrc file
. {user home directory}/.npmrc file
. environment variables

The settings are read from the list above in order.
For example, if you set your proxy in system properties, other sources will be ignored.
The keys that you should use to define your proxy settings are as follows:

[cols=3]
|===
|In System Properties and Environment Variables
|In .npmrc files
|Description

|HTTP_PROXY
|proxy
|a proxy to use for outgoing http requests

|HTTPS_PROXY
|https-proxy
|a proxy to use for outgoing https requests

|NOPROXY
|noproxy
|a comma-separated string of domain extensions that a proxy should not be used for
|===

`.npmrc` file structure is ini (like Java properties files).
It includes pairs of key-values separated by `=`.
Here is an example of the content of such a file with proxy settings:
```
proxy=http://myusername:s3cr3tpassw0rd@proxyserver1:8085"
https-proxy=http://myusername:s3cr3tpassw0rd@proxyserver1:8086"
noproxy=192.168.1.1,vaadin.com,mycompany.com
```

To learn more about `.npmrc` file you can see https://docs.npmjs.com/configuring-npm/npmrc[official npmrc document].

////
Vaadin has a multitude of installation options for different IDEs and dependency
managers.
You can also install it from an installation package:

* With the Eclipse IDE, use the Vaadin Plugin for Eclipse, as described in <<installing.eclipse,"Vaadin Plugin for Eclipse">>
* With the Vaadin plugin for NetBeans IDE ( <<../getting-started/getting-started-netbeans#getting-started.netbeans,"Creating a Project with NetBeans IDE">>) or IntelliJ IDEA
* With Maven, Ivy, Gradle, or other Maven-compatible dependency manager, under Eclipse, NetBeans, IDEA, or using command-line, as described in <<../getting-started/getting-started-maven#getting-started.maven,"Using Vaadin with Maven">>
* From installation package without dependency management, as described in <<../getting-started/getting-started-package#getting-started.package,"Vaadin Installation Package">>
////
